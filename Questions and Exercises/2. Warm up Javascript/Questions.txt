1. What will be the output of the following code?

let x = 42;
if (true) {
console.log(x);
let x = 1337;
}
ans: ReferenceError: x is not defined
Solution Description
Variables defined with let are available only in the nearest enclosing block.

2. Global Scoping
Send Feedback
Guess the Output:
const KEY = 'coding_ninjas';
if (true) {
    const KEY = 'ES6';
}
console.log(KEY);
ans: coding_ninjas.
Solution Description
This declaration creates a constant whose scope can be either global or local to the block in which it is declared. The scope of the inner KEY is only inside the "if" block. That's why the output is 'coding_ninjas.

3. Variable Hoisting
Send Feedback
Find the output:
var temp= 'hello';
function display(){
    console.log(temp);
    var temp = 'bye';
};
display();

ans: undefined, inside function scope temp is hoisted, var temp; console.log(temp); which is undefined.
Solution Description
This code will not give you an error due to variable hoisting.

4. What is the final value of array below?

var array = [1, 2, 3]
const array1 = [4, 5, 6]
var arr1 = array.map(a => a * 2);

array = [...array1, ...arr1]

ans: [4,5,6,2,4,6]

Solution Description
First, each element of the array is getting multiplied by 2 and then the concatenation of 2 arrays is taking place.

5. Rest Operator

What is the output of the following code?
function foo(x, ...y) {
   return x * y.length
}
foo(4,1,2,30);

ans: 12 

Solution Description
Here, ..y is a rest parameter. Rest parameters are used to transform individual elements into an array and rest operators should be written at the end inside the function declaration. So, value 4 is assigned to variable x and the rest (1,2,30) are passed as an array of length 3. So, answer is 12.

6. Find the output of the code below:
for (var i = 0; i < 5; i++) {
  setTimeout(function() { console.log(i); }, i * 1000 );
}

ans: 55555

Solution Description
The variable i is actually declared within the for loop and the inner function accesses it. So when the for loop is done running, each of the inner functions refers to the same variable i, which at the end of the loop is equal to 5.

7. const colors = [
      'Red',
      'Orange',   
      'Purple',
      'Brown',
      'Gray',
      'Pink'
    ];
const [primary, ,secondary,...others] = colors;
console.log(primary, secondary, others);
What will be the output?

ans: Red Purple ['Brown', 'Gray', 'Pink']
Solution Description
In this destructuring, primary variable is assigned the value ‘Red’ and secondary is assigned the value ‘Purple’ which is the 3rd element of colors array. 2nd element of the array is skipped due to ‘,’ (elision) in between. And since, rest operator is used the remaining elements are extracted in the form of array which is others.
- Elision lets you use the syntax of Array “holes” to skip elements during destructuring
- The rest operator lets you extract the remaining elements of an iterable into an Array.


8. Array Destructuring and default value.

Choose the correct output.
const scores = [22, 33]
const [math, science = 50, arts = 50, sst] = scores
console.log(math,science,arts,sst);

ans: 22 33 50 undefined;

Solution Description
Note that Default values provide a fallback if nothing is found in the source. If a part (an object property or an Array element) has no match in the source, it is matched against:
its default value (if specified; it’s optional)
undefined (otherwise)
=> scores array is destructured into variables - math, science, arts and sst but there are only two elements in the array. Therefore, math is assigned scores[0], science is assigned scores[1], arts is assigned the fallback default value of 50, (since, there are no more elements in scores array) and sst is assigned ‘undefined’ by default.

9. Priority List
Send Feedback
A student is creating a list of electronics items he wants to buy with decreasing priority(highest priority item at 0 index).
Electronics=['Mobile', 'Watch', 'Kindle']. 
But due to college requirements, he wants to keep a certain item as his first priority. Can you add that item at the start to create a new priority list using the spread operator?

ans: function newPriorityList(item) {
    var Electronics=['Mobile', 'Watch', 'Kindle'];
    // write your code here
    var ans = [item, ...Electronics];
    return ans;
    
}


// Input and output has already been handled for you

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let remainder = '';
process.stdin.on('data', function (chunk) {
    var ans=newPriorityList(chunk);
    for(var i=0; i<ans.length; i++)
    {
        process.stdout.write(ans[i]+'\n');
    }
    process.exit();
});


10. Sum of N Numbers 
Sum of N numbers
Send Feedback
Write a program for printing the sum of given numbers.
Input :

1 2 3 4
Output:

10


Input:

4 1 3 1 1 1 2
Output:

13

ans: function sumOfNumbers(...args) {  
    // write your code here
    return args.reduce((sum, number)=>sum+number, 0);
    // here args is a spread operator used to spread the variable input as in iterator whiuch is array in this case
    
}


// Input and output has already been handled for you

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let remainder = '';
process.stdin.on('data', function (chunk) {
    var arr = [];
    var a = chunk.toString().split(' '); 
    for(var i=0; i<a.length; i++)
    {
        arr.push(parseInt(a[i]));
    }
    ans = sumOfNumbers(...arr);
    var ans1 = ""+ans;
    process.stdout.write(ans1);
    process.exit();
});

11. This Keyword
Send Feedback
var title = "A Passage to India";
var author = "E.M. Forster";

var novel = {
   title: "Pride and Prejudice",
   author: "Jane Austen",
   print: function() {
       console.log(this.title);
       console.log(this.author);
   }
}

novel.print();
What will be the output of the above program?
1. Uncaught ReferenceError: this is not defined
Uncaught ReferenceError: this is not defined
2. A Passage to India
E.M. Forster
3. Pride and Prejudice
Jane Austen

ans: 3
 
Solution Description
this.title points to the value of the title key inside the object and this.author points to the author key inside the object.

12. Student Grades
Send Feedback
You have to filter all the students with marks greater than the given grades. Complete the given function and return the object.
const students = [
  { name: 'Anjali', grade: 96 },
  { name: 'Navdeep', grade: 84 },
  { name: 'Varun', grade: 100 },
  { name: 'Bhavya', grade: 65 },
  { name: 'Shiva', grade: 90 }
];

ans: function studentGrades(grade) {
    const students = [
        { name: 'Anjali', grade: 96 },
        { name: 'Navdeep', grade: 84 },
        { name: 'Varun', grade: 100 },
        { name: 'Bhavya', grade: 65 },
        { name: 'Shiva', grade: 90 }
      ];
    //Write your code here
    let ans = students.filter(student=>student.grade>=grade);
    return ans;
}


// Input and output has already been handled for you


process.stdin.resume();
process.stdin.setEncoding("utf-8");

let remainder = '';
process.stdin.on('data', function (chunk) {
    let t = parseInt(chunk);
    let ans = studentGrades(t);
    for(var i=0; i<ans.length; i++)
    {
        process.stdout.write(ans[i].name+'\n');
    }
    process.exit();
});

13. map(), filter(), reduce()
Send Feedback
Suppose you have given an array of numbers and you have to convert all the numbers into their perfect squares. Which of the following array functions are useful to accomplish this?
ans: map

Solution Description
The map() method creates a new array with the results of calling a provided function on every element in the calling array. We can create a simple function which will multiply all the numbers inside the array with itself, and this can be done by applying the map function on the array.

14. Remove Duplicates
Send Feedback
Remove duplicates from an array using reduce().
Input Format: Given an array as input

Output Format: Return the answer in the form of array after removing duplicates.



Sample Input:

a b c d a b b c d
Sample Output:

a b c d

ans: function remDup(arr) {  
    // write your code here
   let myNonDuplicateArray = arr.reduce((acc, curr)=>{
          if (acc.indexOf(curr) === -1) {
    acc.push(curr);
  }
  return acc
}, [])
   return myNonDuplicateArray;
    
}



// Input and output has already been handled for you

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let remainder = '';
process.stdin.on('data', function (chunk) {
    var arr = [];
    var a = chunk.toString().split(' '); 
    for(var i=0; i<a.length; i++)
    {
        arr.push(parseInt(a[i]));
    }
    ans = remDup(arr);
    ans.sort();
    for(var i=0; i<ans.length; i++)
    {
        process.stdout.write(ans[i]+' ');
    }
    process.exit();
});


15. Object destructuring in Function Arguments
Which of the following options correctly represents the output of the following code?
function greet({ name, greeting='hello' }) {
  console.log(`${greeting}, ${name}!`)
}
const person = { name: 'Aayushi', dept: 'tech', greeting: 'Welcome'};
greet(person);

ans: Welcome, Ayushi.

Solution Description
Here, The person object is destructured. Note that while destructuring an object, the identifiers must be declared with the same key names which exist in the object (if not following the alias syntax). The variable name and greeting is assigned with the value of the key name and greeting in the person object.

16. How does the arrow function differ from other functions?

Solution Description
a: The return keyword can be eliminated in the case of arrow functions. 
c: There is no need for a function name in the case of arrow functions. 
d: Arrow functions don't have their own "this" value. They inherit "this" from the parent function.

17. Rest Parameters and Spread operator
When we see "..." in the code, it is either rest parameters or the spread syntax. So, What is the difference between them ?

ans: 
Solution Description
The spread operator is used to transform an array into its individual elements whereas the rest parameters are used to transform individual elements into an array. Also, the spread operator is used when calling a function whereas the rest parameters are used in the function parameters.

 - When ... is at the end of function parameters, it’s “rest parameters” and gathers the rest of the list of arguments into an array.
 - When ... occurs in a function call or alike, it’s called a “spread syntax” and expands an array into a list.

The main difference between rest and spread is that the rest operator puts the rest of some specific user-supplied values into a JavaScript array. But the spread syntax expands iterables into individual elements

18. Student Details
Send Feedback
You are given an object which has details of a particular class. Complete the function so that it returns the details of the student at i th index in the form of an array.
Input Format: Given the index (i) of the student whose details should be printed.

Output Format: An array containing name and roll no of the student.



Sample Input:

1
Sample Output

Bhavya
2

ans: function studentDetails(i) { 
    var classDetails = {
        classTeacher: 'Anjani',
        students: [{name: "Anjali", roll: "1"}, {name: "Bhavya", roll: "2"}, {name: "Neha", roll: "3"}]
    };
    // write your code here here is where user writes his code
    let students = classDetails.students;
    let student1 = students[i];
    let arr = Object.values(student1);
    // console.log(arr);
    return arr;
    
}


// Input and output has already been handled for you

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let remainder = '';
process.stdin.on('data', function (chunk) {
    let t = parseInt(chunk);
    let ans = studentDetails(t);
    for(var i=0; i<ans.length; i++)
    {
        process.stdout.write(ans[i]+'\n');
    }
    process.exit();
});
